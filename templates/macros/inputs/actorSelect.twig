{% macro actorSelect(attributes, root_doc) %}
  {% set rand=random() %}
  <div {% if attributes.id %} id="{{attributes.id}}" {% endif %} class="w-100">
    <div class="input-group m-0">
      <select aria-label="{{ attributes.actorType | trans}}" class="form-select" id="ActorTypeSelector_{{rand}}" name="_itil_{{attributes.actorType}}[_type]">
        {% if attributes.actorTypes %}
          {% for name, value in attributes.actorTypes %}
            <option value="{{value}}">{{name|raw}}
          {% endfor %}
        {% endif %}
      </select>
      <select aria-label="{{ attributes.actorType | trans}}" class="form-select" id="ActorSelector_{{rand}}">
      </select>
    </div>
    <table id="ActorTable_{{rand}}" class="w-100 fs-6 table table-sm table-hover align-middle text-center">
      <tbody>
        {% for actor in attributes.values %}
            <tr data-id="{{actor.id}}" data-type="{{actor.type}}">
              <td>
                <i class="{{ actor.icon|raw }}"></i>
              </td>
              <td> {{actor.name|raw}} </td>
              <td class="d-flex flex-row">
                {% if actor.followupTitle %}
                    <button type="button" class="btn btn-sm btn-outline-secondary" aria-label="Manage email followup" title="{{ actor.followupTitle|raw }}"
                        onclick="$('#{{actor.modal}}').dialog('open')"><i class="fas fa-envelope"></i></button>
                {% endif %}
                <button type="button" class="btn btn-sm btn-outline-danger" aria-label="Remove actor {{ actor.name }}" onClick="removeActor{{rand}}('{{actor.type}}', '{{actor.id}}')"><i class="fas fa-times"></i></button>
              </td>
            </tr>
        {% endfor %}
      </tbody>
    </table>
  </div>
  <script>

  function removeActor{{rand}}(type,id) {
    $.ajax({
      url: "{{root_doc}}/ajax/deleteItilActor.php",
      type: "POST",
      data: {
        linkId: type,
        objectTypeId: '{{attributes.actorTypeId}}',
        objectId: id,
        ticketId: '{{attributes.ticketId}}',
      }
    })
    // remove the row from the table
    $(`#ActorTable_{{rand}} tr[data-id='${id}'][data-type='${type}']`).remove();
  }

  function setActorSelectValues{{rand}}() {
    {% if attributes.single is defined and attributes.single %}
    const name = "_" + $('#ActorTypeSelector_{{rand}}').val() + "s_id_{{attributes.actorType}}";
    {% else %}
    const name = "_itil_{{attributes.actorType}}[" + $("#ActorTypeSelector_{{rand}}")[0].value + "s_id]";
    {% endif %}
    $("#ActorSelector_{{rand}}").attr("name", name);
    if ($("#ActorTypeSelector_{{rand}}").val() == 0) {
      $("#ActorSelector_{{rand}}").empty();
      $("#ActorSelector_{{rand}}").attr("disabled", true);
      return;
    } else {
      $("#ActorSelector_{{rand}}").attr("disabled", false);
    };
    
    $.ajax({
      url: "{{root_doc}}/ajax/dropdownItilActors.php",
      type: "POST",
      data: {
        type: $("#ActorTypeSelector_{{rand}}").val(),
        actortype: '{{attributes.actorType}}',
        actorTypeId: '{{attributes.actorTypeId}}',
        itemtype: '{{attributes.itemType}}',
        ticketId: '{{attributes.ticketId}}',
        entity_restrict: '{{entity_id}}',
        use_notif: '1',
        allow_email: false
      },
      success: function (data) {
        let tempDiv = document.createElement('div');
        tempDiv.innerHTML = data;
        
        let newSelect = tempDiv.querySelector('select');
        
        if (newSelect) {
          let currentSelect = document.getElementById('ActorSelector_{{rand}}');
          currentSelect.innerHTML = '';
          
          Array.from(newSelect.children).forEach(child => {
            currentSelect.appendChild(child.cloneNode(true));
          });
          
          if (newSelect.name) {
            currentSelect.name = newSelect.name;
          }
        }
      },
      error: function(xhr, status, error) {
        console.error('AJAX Error:', status, error);
        $("#ActorSelector_{{rand}}").empty();
      }
    });
}
  $(document).ready(() => {
    setActorSelectValues{{rand}}()
    // add all already present actors
    let letJsonSelection = '';
    let selection = '';
    let newSelection = '';
  })
  $("#ActorTypeSelector_{{rand}}").on("change", setActorSelectValues{{rand}})
  </script>
{% endmacro %}
{{ _self.actorSelect(attributes, root_doc) }}
