<div class="table-container">
	{% if not id %}
		{% set id = 'table' ~ random() %}
	{% endif %}
	{% set rand=random() %}
	{% if not minimal or noToolBar is not defined %}
	<div
		id="toolbar{{rand}}"
		class="btn-group"
		>
		{% if massive_action is defined %}
		<button type="button" aria-label="Actions" class="btn btn-secondary" onclick="massiveaction_window{{id}}.dialog('open')">
			<i class="fas fa-hammer" title="Actions"></i>
		</button>
		{% endif %}
		{% if column_edit is defined %}
		<button type="button" class="btn btn-secondary" aria-label="Options" onclick="$('#search-config-{{itemtype}}').dialog('open')">
			<i class="fas fa-wrench" title="Options"></i>
		</button>
		{% endif %}
	</div>
	{% endif %}
	<table aria-label="data"
		id="{{id}}"
		data-cookie="true"
		data-cookie-id-table="{{id}}"
		class="table table-striped table-bordered table-hover"
		{% if height %}
		data-height="{{height}}"
		{% endif %}
		{% if not minimal %}
            {% if noToolBar is not defined %}
                data-toolbar="#toolbar{{rand}}"
                data-show-columns-toggle-all="true"
                data-click-to-select="true"
                data-show-export="true"
                data-show-columns="true"
            {% endif %}
			{% if not height %}
				data-pagination="true"
				show-extended-pagination="true"
			{% endif %}
			data-sortable="true"
            data-page-size="{{pageSize is defined ? pageSize : 15}}"
			data-icons="icons"
		{% endif %}
		{% if url is defined %}
			data-url="{{url}}"
			data-side-pagination="server"
		{% endif %}
		{% if is_trash is defined %} data-buttons="buttons{{rand}}" {% endif %}
		>
		<thead>
			<tr>
				{% if massive_action is defined %}
					<th data-field="state" data-checkbox="true" data-formatter="VerifyMassiveAction{{rand}}"></th>
				{% elseif radio %}
					<th data-radio="true" data-field="select"></th>
				{% endif %}
				{% for state, field in fields %}
					<th {% if not minimal %} data-sortable="true" {% endif  %}
						data-field='{{state}}' >{{ field|raw }}</th>
				{% endfor %}
			</tr>
		</thead>
		{% if url is not defined %}
		<tbody class="table-{{ (is_trash == 1) ? 'primary' : 'light' }}">
			{% for key, value in values %}
				<tr
				{% if massive_action is defined %}
					data-id="{{key}}" data-value='{{massive_action[key]}}'
				{% endif %}
				>
					{% if (massive_action is defined or radio is defined) %}
						<td></td>
					{% endif %}
					{% for col in fields|keys %}
						<td>{{ value[col] | raw }}</td>
					{% endfor %}
				</tr>
			{% endfor %}
		</tbody>
		{% endif %}
	</table>
	{% if radio is defined %}
    <input id="table_input{{id}}" type="hidden" name="{{radio}}" value=''>
	{% endif %}
</div>

<script src="{{root_doc}}/vendor/wenzhixin/bootstrap-table/dist/bootstrap-table.min.js"></script>
<script src="{{root_doc}}/vendor/wenzhixin/bootstrap-table/dist/extensions/cookie/bootstrap-table-cookie.min.js"></script>
<script>
	window.icons = {
		columns: 'fas fa-columns',
		export: 'fas fa-file-export',
	}

	$(function() {
		// Make sure to initialize the table after the DOM is ready!!
		setTimeout(function() {
			$('#{{id}}').bootstrapTable({
                loadingTemplate: function () { return '<div class="spinner-border mt-5" role="status"><span class="visually-hidden">Loading...</span></div>' },
				cookieStorage: 'localStorage'
			});
		}, 200);

		{% if not minimal %}
			const toggles = sessionStorage.getItem('{{itemtype}}-toggles');
			var togglesArray = new Set();
			var init = false;
			const table = $('#{{id}}');

			if (toggles) {
				togglesArray = new Set(JSON.parse(toggles));
			} else {
				init = true;
			}
			table.bootstrapTable('hideAllColumns');
			const columns = table.bootstrapTable('getHiddenColumns');
			for (column of columns) {
				if (init || togglesArray.has(parseInt(column.field))) {
					table.bootstrapTable('showColumn', column.field);
					if (init) {
						togglesArray.add(parseInt(column.field));
					}
				}
			}
			if (init) {
				sessionStorage.setItem('{{itemtype}}-toggles', JSON.stringify(Array.from(togglesArray)));
			}
		{% endif %}
	});

	{% if radio is defined %}
	$('form').on("submit", function() {
		selection = $('#{{id}}').bootstrapTable('getSelections');
		selection.forEach(array => {
			Object.keys(array).forEach(key => {
				if (key.includes("_data")) {
					delete array[key];
				}
			})
		});
		$('#table_input{{id}}').val(JSON.stringify(selection));
	});
	{% endif %}

	{% if not minimal %}
		$('#{{id}}').on('column-switch.bs.table', function (e, field, checked) {
			const toggles = sessionStorage.getItem('{{itemtype}}-toggles');
			var togglesArray = new Set();
			if (toggles) {
				const test = JSON.parse(toggles);
				togglesArray = new Set(test);
			}
			togglesArray.delete(field);
			if (checked) {
				togglesArray.add(field);
			}
			sessionStorage.setItem('{{itemtype}}-toggles', JSON.stringify(Array.from(togglesArray)));
		});

		{% if is_trash is defined and can_trash %}
			function buttons{{rand}}() {
				buttons = {
					btnshowTrash: {
						text: 'Show trash',
						icon: 'fas fa-trash-alt',
						event: function () {
							toogle('is_deleted', '', '', '');
							document.forms['searchform{{ itemtype }}'].submit();
						},
						attributes: {
							title: {{ 'Show trash content'|trans|json_encode|raw }},
							style: {{ (is_trash == 1) ? 'background : #7b081d'|json_encode|raw : ''|json_encode|raw }}
						}
					}
				}
				return buttons;
			}
		{% endif %}
	{% endif %}

	{% if massive_action is defined %}
	function VerifyMassiveAction{{rand}}(value, row, index) {
		if (!row.value && row._data.value) {
			row.value = row._data.value;
		}
		if (!row.value) {
			return {
				disabled: true
			}
		};
	}
	{% endif %}
</script>
