name: "CI"

on:
  # Runs test suite when a new commit is pushed
  # and when a new tag is created
  push:
    branches:
      - '**'
    tags:
       - '*'
  # Runs test suite when a PR is opened or synchronyzed
  pull_request:
  # Enable manual run
  workflow_dispatch:

jobs:
  lint:
    # Do not run scheduled lint on tier repositories
    name: "Lint on PHP ${{ matrix.php-version }}"
    # Choose Ubuntu docker image
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      # Execute tests with several versions of php
      matrix:
        include:
          - {php-version: "8.2"}
    # Define environement variable
    env:
      COMPOSE_FILE: ".github/actions/docker-compose-app.yml"
      APPLICATION_ROOT: "${{ github.workspace }}"
      PHP_IMAGE: "githubactions-php:${{ matrix.php-version }}"
      UPDATE_FILES_ACL: true
    steps:
      - name: "Cancel previous runs"
        uses: "styfle/cancel-workflow-action@0.5.0"
        with:
          access_token: "${{ github.token }}"
      - name: "Clean workspace"
        run: |
          echo "APP_CONTAINER_HOME=${{ runner.temp }}/app_home" >> $GITHUB_ENV
          rm -rf "${{ env.APPLICATION_ROOT }}/*"
          rm -rf "${{ env.APP_CONTAINER_HOME }}/*"
      - name: "Checkout"
        uses: "actions/checkout@v2"
      - name: "Restore dependencies cache"
        uses: actions/cache@v2
        with:
          path: |
            ${{ env.APP_CONTAINER_HOME }}/.composer/cache/
            ${{ env.APP_CONTAINER_HOME }}/.npm/_cacache/
          key: "app_home_deps-${{ matrix.php-version }}-${{ hashFiles('composer.lock', 'package-lock.json') }}"
          restore-keys: |
            app_home_deps-${{ matrix.php-version }}-
            app_home_deps-
      - name: "Restore lint cache"
        uses: actions/cache@v2
        with:
          path: |
            ${{ env.APP_CONTAINER_HOME }}/phpcs.cache
          key: "app_home_lint-${{ matrix.php-version }}-${{ github.base_ref || github.ref }}"
          restore-keys: |
            app_home_lint-${{ matrix.php-version }}
            app_home_lint-
      - name: "install docker-compose"
        run: sudo apt update && sudo apt install docker-compose
      - name: "Initialize containers"
        run: |
          .github/actions/init_containers-start.sh
      - name: "Show versions"
        run: |
          .github/actions/init_show-versions.sh
      - name: "Install dependencies"
        run: |
          docker-compose exec -T app .github/actions/init_build.sh
      - name: "Cleanup containers"
        if: always()
        run: |
          .github/actions/teardown_containers-cleanup.sh

  tests:
    name: "Test on PHP ${{ matrix.php-version }} using ${{ matrix.db-image }}"
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        include:
          # test higher PHP version with higher MariaDB and MySQL versions
          - {php-version: "8.0", db-image: "mariadb:10.9", always: true}
          - {php-version: "8.0", db-image: "mysql:8.0", always: true}
    env:
      if: github.repository == 'itsmng/itsm-ng'
      # Skip jobs that should not be always run on pull requests or on push on tier repository (to limit workers usage).
      # No jobs will be skipped on nightly build, manual dispatch or push on main branches (master and */bugfixes) or tags.
      skip: ${{ matrix.always == false && (github.event_name == 'pull_request' || github.repository != 'itsmng/itsm-ng' || !(github.event_name == 'workflow_dispatch' || github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags'))) }}
      COMPOSE_FILE: ".github/actions/docker-compose-app.yml:.github/actions/docker-compose-services.yml"
      APPLICATION_ROOT: "${{ github.workspace }}"
      DB_IMAGE: "githubactions-${{ matrix.db-image }}"
      PHP_IMAGE: "githubactions-php:${{ matrix.php-version }}"
      UPDATE_FILES_ACL: true
    steps:
      - name: "Cancel previous runs"
        if: env.skip != 'true'
        uses: "styfle/cancel-workflow-action@0.5.0"
        with:
          access_token: "${{ github.token }}"
      - name: "Clean workspace"
        if: env.skip != 'true'
        run: |
          echo "APP_CONTAINER_HOME=${{ runner.temp }}/app_home" >> $GITHUB_ENV
          rm -rf "${{ env.APPLICATION_ROOT }}/*"
          rm -rf "${{ env.APP_CONTAINER_HOME }}/*"
      - name: "Checkout"
        if: env.skip != 'true'
        uses: "actions/checkout@v2"
      - name: "Restore dependencies cache"
        if: env.skip != 'true'
        uses: actions/cache@v2
        with:
          path: |
            ${{ env.APP_CONTAINER_HOME }}/.composer/cache/
            ${{ env.APP_CONTAINER_HOME }}/.npm/_cacache/
          key: "app_home_deps-${{ matrix.php-version }}-${{ hashFiles('composer.lock', 'package-lock.json') }}"
          restore-keys: |
            app_home_deps-${{ matrix.php-version }}-
            app_home_deps-
      - name: "install docker-compose"
        run: sudo apt update && sudo apt install docker-compose
      - name: "Initialize containers"
        if: env.skip != 'true'
        run: |
          .github/actions/init_containers-start.sh
      - name: "Show versions"
        if: env.skip != 'true'
        run: |
          .github/actions/init_show-versions.sh
      - name: "Install dependencies"
        if: env.skip != 'true'
        run: |
          docker-compose exec -T app .github/actions/init_build.sh
      - name: "Install DB tests"
        if: env.skip != 'true'
        run: |
          docker-compose exec -T app .github/actions/test_install.sh
      - name: "Update DB tests"
        if: env.skip != 'true'
        run: |
          .github/actions/init_initialize-old-dbs.sh
          docker-compose exec -T app .github/actions/test_update-from-older-version.sh
      - name: "Unit tests"
        if: env.skip != 'true'
        run: |
          docker-compose exec -T app .github/actions/test_tests-units.sh
      - name: "Cleanup containers"
        if: env.skip != 'true' && always()
        run: |
          .github/actions/teardown_containers-cleanup.sh
